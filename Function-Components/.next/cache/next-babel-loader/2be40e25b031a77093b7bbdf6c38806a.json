{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar defaultState = {\n  tasks: []\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'FETCH_TASKS':\n      return _objectSpread({}, state, {\n        tasks: action.tasks\n      });\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Volumes/Lost-Found/Udemy/TS Dmytro/Function-Components/reducer.ts"],"names":["defaultState","tasks","reducer","state","action","type"],"mappings":";;;;;;;;;;;;AAOA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAGlB;AAAA,MAFHC,KAEG,uEAFeH,YAEf;AAAA,MADHI,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,+BACKF,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAFhB;AAFJ;;AAOA,SAAOE,KAAP;AACD,CAZM","sourcesContent":["import { Task } from './types';\nimport { FetchTasksAction } from './actions';\n\nexport interface AppState {\n  tasks: Task[];\n}\n\nconst defaultState = {\n  tasks: []\n};\n\nexport const reducer = (\n  state: AppState = defaultState,\n  action: FetchTasksAction\n) => {\n  switch (action.type) {\n    case 'FETCH_TASKS':\n      return {\n        ...state,\n        tasks: action.tasks\n      };\n  }\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}